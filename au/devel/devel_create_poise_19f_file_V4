/*Used to create a default file*/
/*devel_create_poise_19f_file*/

//  For V3 :-
//For CH2Cl2 as an example, the files should contain the numbers (see create_poise_NUC):-
// 12,5.4,6,5,8,8,50,60,0.2,minabsint,default,8,10,8,0.2,10s,1,zg30//
//which are :-
//SW,O1P,P1 peak ppm UB,P1 peak ppm  HB,RG,T1,Poise P1 % LB,Poise P1 % UB,Poise Tolerance,Poise calc method,poise aquisistion/processing program,Sino T!,Sino noise  F1,Sino Noise F2,Sino noise width,Sino AQ time,Sino LB,Sino PP
/*V4 - add disclaimer*/

/*add version info to defaults file*/

char defaults_file_name[PATH_MAX];
char param_set_name[PATH_MAX]="F19";
char junk_name[PATH_MAX]="junk";
char file_text[1024]="";
char instrum_name[40];
char probe_name[PATH_MAX];
char probe_name_trunc[PATH_MAX];
char probe_id[40];
char probe_nickname[40];
char* str_probe;
FILE *defaults_file = NULL;

double sw_double = 20;
double o1_ppm_double = -108.0;
double f1p_double = -107.0;
double f2p_double = -109.0;
float rg_float = 64.0;

float d1_float = 10.0;
int pc_lb_int = 50;
int pc_hb_int = 60;
float tol_float = 0.2;
char cost_function[40]="minabsint";
char poise_au[40]="default";

float t1_float=10.0;
double noise_f1_double = -100.0;
double noise_f2_double = -104.0;
double noise_width_double=0.2;
char sino_aq[8]="10s";
double sino_lb_float=1.0;

char sino_pp[40]="zg30";
char repo_name[40]="cam-ts"; //set to name of your repository
char au_version[8]="V4";

int ts_major = GetTsVersionMajor();
int ts_minor = GetTsVersionMinor();
int ts_patch = GetTsVersionPl();

int disclaimer = 1;

if(disclaimer == 1){
i1 = Proc_err(QUESTION_OPT,"THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, \
WITHOUT ANY WARRANTY.\n IT IS PROVIDED 'AS IS' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\n \
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE.\n \
THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.\n \
SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\n \
REPAIR OR CORRECTION.\n\n \
IN NO EVENT WILL THE AUTHOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL,\n \
SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY\n \
TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED\n \
INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM\n \
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE \n \
POSSIBILITY OF SUCH DAMAGES.\n\n \
Click OK to agree and continue. \nClick cancel to disagree.\n\n \
Remove this warning by setting disclaimer to 0 in the AU program.");

   if ( i1 == ERR_CANCEL )
  {
      ABORT
   }
  else {
  }
} //end of disclaimer

GETCURDATA

#ifdef HAS_WINDOWS_FEATURES
   sprintf(defaults_file_name,"C:\\Bruker\\%s%i\\poise\\service_poise_19f_p1_defaults_%s",repo_name,ts_major,au_version);
#else //Not actually checked this on linux... We have no linux solution-state spectrometers
 		sprintf(defaults_file_name,"/opt/%s%i/poise/service_poise_19f_p1_defaults_%s",repo_name,ts_major,au_version);
#endif

if (i_argc == 3 ) {
	sprintf(defaults_file_name,"%s",i_argv[2]); //lets just assume first argument is a filename
} else
  {
		//Ask if want to determine what it should be - can't do that unless run an expt.
    DATASET(junk_name,1 ,procno, disk, user)
		GETCURDATA
		RPAR(param_set_name, "all")
		GETPROSOL
		GETCURDATA
		SETCURDATA
    VIEWDATA_SAMEWIN
		STOREPAR("NS", 1)
		STOREPAR("DS", 0)
		STOREPAR("P 1", 1.0)
		ZG_OVERWRITE
		FETCHPARS("INSTRUM", instrum_name)
    FETCHPARS("PROBHD", probe_name)

    CALL_PROBESERVER("probe_client getParams getInstalledProbe", str_probe);

    //some magic from au_sst1ir
    (void) sscanf(str_probe, "%[^,]%*c%*[^,]%*c%*[^,]%*c%*[^,]%*c%[^,]%*s", probe_id, probe_nickname);
    sprintf(probe_name_trunc,"%s",probe_id);
    sprintf( defaults_file_name,"%s-%s-%s.txt",defaults_file_name,instrum_name,probe_name_trunc);

  }
  //maybe make it ask for values here

//write out above defined values to defaults file


Proc_err(DEF_ERR_OPT,"defaults filename - %s",defaults_file_name);
Proc_err(DEF_ERR_OPT,"defaults content - %s",file_text);
defaults_file = fopen (defaults_file_name,"w");
if (defaults_file == NULL) 
{
     Proc_err(DEF_ERR_OPT,"can't open file - %s", defaults_file_name);
     exit(1);
}
else 
{
     sprintf(file_text,"%.2f,%.2f,%.2f,%.2f,%.2f," ,sw_double,o1_ppm_double,f1p_double,f2p_double,rg_float);
     fputs(file_text,defaults_file);
     sprintf(file_text,"%.2f,%i,%i,%.2f,%s,",d1_float,pc_lb_int,pc_hb_int,tol_float,cost_function);
     fputs(file_text,defaults_file);
     sprintf(file_text,"%s,%.2f,%.2f,%.2f,%.2f,",poise_au,t1_float,noise_f1_double,noise_f2_double,noise_width_double);
     fputs(file_text,defaults_file);
     sprintf(file_text,"%s,%.2f,%s", sino_aq,sino_lb_float,sino_pp);
     fputs(file_text,defaults_file);
     fclose(defaults_file);
}

QUIT
